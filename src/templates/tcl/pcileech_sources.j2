{{ header_comment }}
puts "Setting up PCILeech source files..."
{% from "_helpers.j2" import safe_board_name %}
{{ header_comment if header_comment else "# PCILeech Sources" }}
#
 # Generated sources list - Config-only architecture
 #
 # Board: {{ safe_board_name(board) }}
#

# Source directories
set src_dir "{{ pcileech.src_dir if pcileech.src_dir else 'src' }}"
set ip_dir "{{ pcileech.ip_dir if pcileech.ip_dir else 'ip' }}"

puts "Adding PCILeech source files from repository..."

# Add PCILeech HDL files from the cloned repository
# These are the proven, tested HDL modules from ufrisk/pcileech-fpga
{% if pcileech.source_files %}
{% for source_file in pcileech.source_files %}
if {[file exists "$src_dir/{{ source_file }}"]} {
    add_files -norecurse "$src_dir/{{ source_file }}"
    puts "Added PCILeech source: {{ source_file }}"
} else {
    puts "WARNING: PCILeech source not found: $src_dir/{{ source_file }}"
}
{% endfor %}
{% endif %}

# Add our generated device configuration (config-only)
puts "Adding device configuration files..."
set config_files [list \
    "device_config.sv" \
]

foreach config_file $config_files {
    if {[file exists "$src_dir/$config_file"]} {
        add_files -norecurse "$src_dir/$config_file"
        puts "Added config file: $config_file"
    } else {
        puts "WARNING: Config file not found: $src_dir/$config_file"
    }
}

# Add PCILeech IP core files
{% if pcileech.ip_files %}
{% for ip_file in pcileech.ip_files %}
if {[file exists "$ip_dir/{{ ip_file }}"]} {
    add_files -norecurse "$ip_dir/{{ ip_file }}"
    puts "Added IP file: {{ ip_file }}"
} else {
    puts "WARNING: IP file not found: $ip_dir/{{ ip_file }}"
}
{% endfor %}
{% endif %}

# Add generated coefficient files
set coeff_files [list \
    "pcileech_cfgspace.coe" \
]

{% if msix_enabled %}
# Add MSI-X writemask COE if present
lappend coeff_files "pcileech_cfgspace_writemask.coe"
{% endif %}

foreach coeff_file $coeff_files {
    if {[file exists "$src_dir/$coeff_file"]} {
        add_files -norecurse "$src_dir/$coeff_file"
        set_property file_type "Coefficient Files" [get_files "$src_dir/$coeff_file"]
        puts "Added coefficient file: $coeff_file"
    } else {
        puts "INFO: Optional coefficient file not found: $src_dir/$coeff_file"
    }
}

# Set top-level module to PCILeech's board-specific top
{% if top_module %}
set_property top {{ top_module }} [current_fileset]
puts "Set top module: {{ top_module }}"
{% else %}
# Default to common PCILeech top module naming pattern
{% if board.name == "AC701" %}
set_property top pcileech_ac701_top [current_fileset]
puts "Set top module: pcileech_ac701_top"
{% elif board.name == "KC705" %}
set_property top pcileech_kc705_top [current_fileset]  
puts "Set top module: pcileech_kc705_top"
{% elif board.name == "75T" %}
set_property top pcileech_75t_top [current_fileset]
puts "Set top module: pcileech_75t_top"
{% else %}
set_property top pcileech_top [current_fileset]
puts "Set top module: pcileech_top (default)"
{% endif %}
{% endif %}

# Update compile order
update_compile_order -fileset sources_1

puts "PCILeech source files added successfully"