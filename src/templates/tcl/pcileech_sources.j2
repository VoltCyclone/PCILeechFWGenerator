{{ header_comment }}
puts "Setting up PCILeech source files..."
{% from "_helpers.j2" import safe_board_name %}
{{ header_comment if header_comment else "# PCILeech Sources" }}
#
 # Generated sources list
 #
 # Board: {{ safe_board_name(board) }}
#

# Source directories
set src_dir "{{ pcileech.src_dir if pcileech.src_dir else 'src' }}"
set ip_dir "{{ pcileech.ip_dir if pcileech.ip_dir else 'ip' }}"

puts "Adding PCILeech source files..."

# Add PCILeech SystemVerilog source files
{% if pcileech.source_files %}
{% for source_file in pcileech.source_files %}
if {[file exists "$src_dir/{{ source_file }}"]} {
    add_files -norecurse "$src_dir/{{ source_file }}"
    puts "Added source file: {{ source_file }}"
} else {
    puts "WARNING: Source file not found: $src_dir/{{ source_file }}"
}
{% endfor %}
{% else %}
# Default PCILeech source files
set pcileech_sources [list \
    "pcileech_tlps128_bar_controller.sv" \
    "pcileech_fifo.sv" \
    "bar_controller.sv" \
    "cfg_shadow.sv" \
    "device_config.sv" \
    "msix_capability_registers.sv" \
    "msix_implementation.sv" \
    "msix_table.sv" \
    "option_rom_bar_window.sv" \
    "option_rom_spi_flash.sv" \
    "top_level_wrapper.sv" \
]

foreach source_file $pcileech_sources {
    if {[file exists "$src_dir/$source_file"]} {
        add_files -norecurse "$src_dir/$source_file"
        puts "Added source file: $source_file"
    } else {
        puts "WARNING: Source file not found: $src_dir/$source_file"
    }
}
{% endif %}

# Add PCILeech IP core files
{% if pcileech.ip_files %}
{% for ip_file in pcileech.ip_files %}
if {[file exists "$ip_dir/{{ ip_file }}"]} {
    add_files -norecurse "$ip_dir/{{ ip_file }}"
    puts "Added IP file: {{ ip_file }}"
} else {
    puts "WARNING: IP file not found: $ip_dir/{{ ip_file }}"
}
{% endfor %}
{% else %}
# Default PCILeech IP files
set pcileech_ip_files [list \
    "pcie_7x_0.xci" \
    "fifo_generator_0.xci" \
    "clk_wiz_0.xci" \
]

foreach ip_file $pcileech_ip_files {
    if {[file exists "$ip_dir/$ip_file"]} {
        add_files -norecurse "$ip_dir/$ip_file"
        puts "Added IP file: $ip_file"
    } else {
        puts "INFO: Optional IP file not found: $ip_dir/$ip_file"
    }
}
{% endif %}

# Add PCILeech coefficient files
{% if pcileech.coefficient_files %}
{% for coeff_file in pcileech.coefficient_files %}
if {[file exists "$src_dir/{{ coeff_file }}"]} {
    add_files -norecurse "$src_dir/{{ coeff_file }}"
    set_property file_type "Coefficient Files" [get_files "$src_dir/{{ coeff_file }}"]
    puts "Added coefficient file: {{ coeff_file }}"
} else {
    puts "WARNING: Coefficient file not found: $src_dir/{{ coeff_file }}"
}
{% endfor %}
{% else %}
# Default PCILeech coefficient files
set pcileech_coeff_files [list \
    "pcileech_cfgspace.coe" \
]

foreach coeff_file $pcileech_coeff_files {
    if {[file exists "$src_dir/$coeff_file"]} {
        add_files -norecurse "$src_dir/$coeff_file"
        set_property file_type "Coefficient Files" [get_files "$src_dir/$coeff_file"]
        puts "Added coefficient file: $coeff_file"
    } else {
        puts "INFO: Optional coefficient file not found: $src_dir/$coeff_file"
    }
}
{% endif %}

# Validate that source files were added
set source_files [get_files -of_objects [get_filesets sources_1]]
if {[llength $source_files] == 0} {
    puts "ERROR: No source files were added to the project"
    puts "Check that source files exist in the expected directories:"
    puts "  Source directory: $src_dir"
    puts "  IP directory: $ip_dir"
    exit 1
}

puts "Successfully added [llength $source_files] file(s) to project"

# Ensure all .sv files are treated as SystemVerilog
set sv_files [get_files -of_objects [get_filesets sources_1] -filter {FILE_TYPE == "Verilog"}]
foreach sv_file $sv_files {
    if {[string match "*.sv" $sv_file]} {
        set_property file_type SystemVerilog [get_files $sv_file]
        puts "Set file type to SystemVerilog: [file tail $sv_file]"
    }
}

# Set top-level module
{% if top_module %}
set top_name "{{ top_module }}"
{% else %}
set top_name "pcileech_top"
{% endif %}

set_property top $top_name [current_fileset]
puts "Set top module: $top_name"

# Disable auto-inference of top module to prevent changes
set_property top_auto_set 0 [current_fileset]

# Update compile order
update_compile_order -fileset sources_1

# Validate top module is set correctly
set actual_top [get_property top [current_fileset]]
if {$actual_top != $top_name} {
    puts "ERROR: Top module not set correctly"
    puts "  Expected: $top_name"
    puts "  Got: $actual_top"
    exit 1
}

# Verify top module exists in source files
set top_found 0
foreach src_file $source_files {
    if {[string match "*$top_name*" $src_file]} {
        set top_found 1
        puts "Found top module in: [file tail $src_file]"
        break
    }
}

if {!$top_found} {
    puts "WARNING: Top module file not found in added sources"
    puts "  Looking for: $top_name"
    puts "  Available files:"
    foreach src_file $source_files {
        puts "    - [file tail $src_file]"
    }
}

puts "PCILeech source files added successfully"
puts "  Total files: [llength $source_files]"
puts "  Top module: $actual_top"