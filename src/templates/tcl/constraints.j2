{#
Constraints Template - Timing and Physical Constraints Management

This template generates timing constraints and pin assignments based on the
current tcl_generator.py implementation.

IMPORTANT: Pin assignments are based on existing PCILeech XDC files from the
official repository. For board-specific constraints, refer to:
https://github.com/ufrisk/pcileech-fpga/tree/master/

Available board-specific XDC files:
- CaptainDMA/75t484_x1/src/pcileech_75t484_x1_captaindma_75t.xdc
- CaptainDMA/100t484_x1/src/pcileech_100t484_x1_captaindma_100t.xdc
- And others for different FPGA variants

Please update the pin assignments below for your specific board and FPGA package.

Context variables expected:
- device: Device information (vendor_id, device_id)
- board: Board information (name)
- header: TCL header comment
#}
{{ header }}

puts "Adding constraint files..."

# Add all constraint files
set xdc_files [glob -nocomplain *.xdc]
if {[llength $xdc_files] > 0} {
    puts "Found [llength $xdc_files] constraint files"
    add_files -fileset constrs_1 -norecurse $xdc_files
    foreach xdc_file $xdc_files {
        puts "  - $xdc_file"
    }
}

# Generate device-specific timing constraints
puts "Adding device-specific timing constraints..."
# Try to use board-specific XDC constraints if board type is specified
{% if board and board.name %}
puts "Attempting to load board-specific XDC constraints for: {{ board.name }}"

# Try to read XDC constraints from PCILeech repository
catch {
    # This will be populated by the constraint generation system
    # with actual XDC content from the PCILeech FPGA repository
    {% if board_xdc_content %}
{{ board_xdc_content | indent(4, True) }}
    {% else %}
    puts "Warning: No board-specific XDC content available, using fallback constraints"
    {% endif %}
}
{% endif %}

# Fallback timing constraints for basic functionality
set timing_constraints {
    # Clock constraints
    create_clock -period 10.000 -name sys_clk [get_ports clk]
    
    # Input delay constraints for actual input ports
    set_input_delay -clock sys_clk 2.000 [get_ports reset_n]
    catch {set_input_delay -clock sys_clk 2.000 [get_ports pcie_rx_data*]}
    catch {set_input_delay -clock sys_clk 2.000 [get_ports pcie_rx_valid]}
    catch {set_input_delay -clock sys_clk 2.000 [get_ports cfg_ext_read_received]}
    catch {set_input_delay -clock sys_clk 2.000 [get_ports cfg_ext_write_received]}
    catch {set_input_delay -clock sys_clk 2.000 [get_ports cfg_ext_register_number*]}
    catch {set_input_delay -clock sys_clk 2.000 [get_ports cfg_ext_function_number*]}
    catch {set_input_delay -clock sys_clk 2.000 [get_ports cfg_ext_write_data*]}
    catch {set_input_delay -clock sys_clk 2.000 [get_ports cfg_ext_write_byte_enable*]}
    catch {set_input_delay -clock sys_clk 2.000 [get_ports msix_interrupt_ack]}
    
    # Output delay constraints - only apply to ports that exist
    # Use catch to handle missing ports gracefully
    catch {set_output_delay -clock sys_clk 2.000 [get_ports pcie_tx_data*]}
    catch {set_output_delay -clock sys_clk 2.000 [get_ports pcie_tx_valid]}
    catch {set_output_delay -clock sys_clk 2.000 [get_ports cfg_ext_read_data*]}
    catch {set_output_delay -clock sys_clk 1.000 [get_ports cfg_ext_read_data_valid]}
    catch {set_output_delay -clock sys_clk 2.000 [get_ports msix_interrupt]}
    catch {set_output_delay -clock sys_clk 2.000 [get_ports msix_vector*]}
    catch {set_output_delay -clock sys_clk 2.000 [get_ports debug_status*]}
    catch {set_output_delay -clock sys_clk 2.000 [get_ports device_ready]}

    # Device-specific constraints for {{ device.vendor_id }}:{{ device.device_id }}
    # Board-specific pin assignments for {{ board.name }}
    
    # NOTE: Pin assignments should be loaded from board-specific XDC files above.
    # The following are fallback constraints that may not be valid for your board.
    # Please ensure board-specific XDC files are available in the PCILeech repository.
    
    {% if not board_xdc_content %}
    # Fallback pin assignments (THESE ARE EXAMPLES - UPDATE FOR YOUR BOARD)
    # Clock and Reset pins - adjust for your specific FPGA package
    catch {
        set_property PACKAGE_PIN E3 [get_ports clk]
        set_property IOSTANDARD LVCMOS33 [get_ports clk]
        set_property PACKAGE_PIN C12 [get_ports reset_n]
        set_property IOSTANDARD LVCMOS33 [get_ports reset_n]
    }
    
    # Additional pin assignments would go here...
    # For production use, ensure you have proper board-specific XDC files
    puts "WARNING: Using fallback pin assignments - update for your specific board!"
    {% endif %}
}

# Write timing constraints to file
set constraints_file "./device_constraints.xdc"
set fp [open $constraints_file w]
puts $fp $timing_constraints
close $fp
add_files -fileset constrs_1 -norecurse $constraints_file

puts "Constraints setup completed"