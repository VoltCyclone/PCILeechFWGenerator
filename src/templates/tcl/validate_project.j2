{{ header_comment }}
#
# Project validation script - checks for common issues
# Run this before build to catch configuration problems early
#

puts "=========================================="
puts "PCILeech Project Validation"
puts "=========================================="

set validation_errors 0
set validation_warnings 0

# Check if project exists
set project_dir "vivado_project"
set project_name "pcileech_firmware"
set project_file [file join $project_dir "${project_name}.xpr"]

if {![file exists $project_file]} {
    puts "ERROR: Project file not found: $project_file"
    puts "Run project generation script first"
    exit 1
}

puts "✓ Project file exists: $project_file"

# Open project
if {[catch {open_project $project_file} err]} {
    puts "ERROR: Failed to open project: $err"
    exit 1
}

puts "✓ Project opened successfully"

# Check FPGA part
set fpga_part [get_property PART [current_project]]
puts "✓ FPGA Part: $fpga_part"

# Check top module
set top_module [get_property top [get_filesets sources_1]]
if {$top_module == ""} {
    puts "✗ ERROR: Top module not set"
    incr validation_errors
} else {
    puts "✓ Top module: $top_module"
    
    # Check if top auto-set is disabled
    set top_auto [get_property top_auto_set [get_filesets sources_1]]
    if {$top_auto == 1} {
        puts "⚠ WARNING: Top module auto-set is enabled (may change unexpectedly)"
        incr validation_warnings
    } else {
        puts "✓ Top module auto-set: disabled"
    }
}

# Check source files
set source_files [get_files -of_objects [get_filesets sources_1]]
set source_count [llength $source_files]

if {$source_count == 0} {
    puts "✗ ERROR: No source files in project"
    incr validation_errors
} else {
    puts "✓ Source files: $source_count file(s)"
}

# Check SystemVerilog files
set sv_files [get_files -of_objects [get_filesets sources_1] -filter {FILE_TYPE == "SystemVerilog"}]
set sv_count [llength $sv_files]

if {$sv_count == 0} {
    puts "⚠ WARNING: No SystemVerilog files found"
    incr validation_warnings
} else {
    puts "✓ SystemVerilog files: $sv_count file(s)"
}

# List all source files with their types
puts ""
puts "Source file details:"
foreach src_file $source_files {
    set file_type [get_property file_type [get_files $src_file]]
    set file_name [file tail $src_file]
    puts "  - $file_name ($file_type)"
}

# Check for .sv files that aren't marked as SystemVerilog
set mistyped_sv 0
foreach src_file $source_files {
    if {[string match "*.sv" $src_file]} {
        set file_type [get_property file_type [get_files $src_file]]
        if {$file_type != "SystemVerilog"} {
            puts "✗ ERROR: .sv file not marked as SystemVerilog: [file tail $src_file] (type: $file_type)"
            incr validation_errors
            incr mistyped_sv
        }
    }
}

if {$mistyped_sv == 0 && $sv_count > 0} {
    puts "✓ All .sv files correctly typed as SystemVerilog"
}

# Check IP cores
set ip_files [get_files -of_objects [get_filesets sources_1] -filter {FILE_TYPE == "IP"}]
set ip_count [llength $ip_files]

if {$ip_count > 0} {
    puts "✓ IP cores: $ip_count core(s)"
    foreach ip_file $ip_files {
        puts "  - [file tail $ip_file]"
    }
} else {
    puts "⚠ WARNING: No IP cores found (may be expected)"
    incr validation_warnings
}

# Check constraints
set constr_files [get_files -of_objects [get_filesets constrs_1]]
set constr_count [llength $constr_files]

if {$constr_count == 0} {
    puts "⚠ WARNING: No constraint files found"
    incr validation_warnings
} else {
    puts "✓ Constraint files: $constr_count file(s)"
    foreach constr_file $constr_files {
        puts "  - [file tail $constr_file]"
    }
}

# Check synthesis run
set synth_status [get_property STATUS [get_runs synth_1]]
set synth_progress [get_property PROGRESS [get_runs synth_1]]
puts "✓ Synthesis run status: $synth_status ($synth_progress)"

# Check implementation run
set impl_status [get_property STATUS [get_runs impl_1]]
set impl_progress [get_property PROGRESS [get_runs impl_1]]
puts "✓ Implementation run status: $impl_status ($impl_progress)"

# Summary
puts ""
puts "=========================================="
puts "Validation Summary"
puts "=========================================="
puts "Errors: $validation_errors"
puts "Warnings: $validation_warnings"

if {$validation_errors > 0} {
    puts ""
    puts "✗ VALIDATION FAILED"
    puts "Fix errors before attempting build"
    close_project
    exit 1
} elseif {$validation_warnings > 0} {
    puts ""
    puts "⚠ VALIDATION PASSED WITH WARNINGS"
    puts "Build may succeed but review warnings"
    close_project
    exit 0
} else {
    puts ""
    puts "✓ VALIDATION PASSED"
    puts "Project is ready for build"
    close_project
    exit 0
}
