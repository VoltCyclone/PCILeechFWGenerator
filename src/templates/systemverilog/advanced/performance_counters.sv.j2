{#- Performance Counters Template -#}
    // Performance Counter Declarations
{%- if performance_counters.enable_bandwidth %}
    logic [{{ performance_counters.counter_width - 1 }}:0] bandwidth_counter = {{ performance_counters.counter_width }}'h0;
    logic [{{ performance_counters.counter_width - 1 }}:0] bytes_transferred = {{ performance_counters.counter_width }}'h0;
{%- endif %}
{%- if performance_counters.enable_latency %}
    logic [{{ performance_counters.counter_width - 1 }}:0] latency_accumulator = {{ performance_counters.counter_width }}'h0;
    logic [{{ performance_counters.counter_width - 1 }}:0] latency_samples = {{ performance_counters.counter_width }}'h0;
{%- endif %}
{%- if performance_counters.enable_error_rate %}
    logic [{{ performance_counters.counter_width - 1 }}:0] error_rate_counter = {{ performance_counters.counter_width }}'h0;
{%- endif %}
    logic [{{ performance_counters.counter_width - 1 }}:0] transaction_counter = {{ performance_counters.counter_width }}'h0;
    logic [15:0] performance_sample_timer = 16'h0;
    logic performance_sample_trigger;

    // Performance monitoring logic
    always_ff @(posedge clk or negedge reset_n) begin
        if (!reset_n) begin
            transaction_counter <= {{ performance_counters.counter_width }}'h0;
{%- if performance_counters.enable_bandwidth %}
            bandwidth_counter <= {{ performance_counters.counter_width }}'h0;
            bytes_transferred <= {{ performance_counters.counter_width }}'h0;
{%- endif %}
{%- if performance_counters.enable_latency %}
            latency_accumulator <= {{ performance_counters.counter_width }}'h0;
            latency_samples <= {{ performance_counters.counter_width }}'h0;
{%- endif %}
{%- if performance_counters.enable_error_rate %}
            error_rate_counter <= {{ performance_counters.counter_width }}'h0;
{%- endif %}
            performance_sample_timer <= 16'h0;
        end else begin
            // Sample timer for periodic measurements
            performance_sample_timer <= performance_sample_timer + 1;
            
            // Transaction counting
            if (bar_wr_en || bar_rd_en) begin
                transaction_counter <= transaction_counter + 1;
            end
            
{%- if performance_counters.enable_bandwidth %}
            // Bandwidth monitoring
            if (bar_wr_en) begin
                bandwidth_counter <= bandwidth_counter + 1;
                bytes_transferred <= bytes_transferred + 4; // Assuming 32-bit transfers
            end
            if (bar_rd_en) begin
                bandwidth_counter <= bandwidth_counter + 1;
                bytes_transferred <= bytes_transferred + 4;
            end
{%- endif %}

{%- if performance_counters.enable_latency %}
            // Latency measurement (simplified)
            if (cfg_ext_read_received) begin
                latency_samples <= latency_samples + 1;
                // Add current timer value as latency sample
                latency_accumulator <= latency_accumulator + performance_sample_timer[7:0];
            end
{%- endif %}

{%- if performance_counters.enable_error_rate %}
            // Error rate monitoring
            if (correctable_error_detected || uncorrectable_error_detected) begin
                error_rate_counter <= error_rate_counter + 1;
            end
{%- endif %}

            // Reset counters on overflow or sample trigger
            if (performance_sample_trigger) begin
{%- if performance_counters.enable_bandwidth %}
                bandwidth_counter <= {{ performance_counters.counter_width }}'h0;
                bytes_transferred <= {{ performance_counters.counter_width }}'h0;
{%- endif %}
{%- if performance_counters.enable_latency %}
                latency_accumulator <= {{ performance_counters.counter_width }}'h0;
                latency_samples <= {{ performance_counters.counter_width }}'h0;
{%- endif %}
                performance_sample_timer <= 16'h0;
            end
        end
    end

    // Performance sample trigger (every 65536 cycles)
    assign performance_sample_trigger = (performance_sample_timer == 16'hFFFF);

    // Performance counter read interface
    always_comb begin
        case (perf_counter_select)
            4'h0: perf_counter_data = transaction_counter;
{%- if performance_counters.enable_bandwidth %}
            4'h1: perf_counter_data = bandwidth_counter;
            4'h2: perf_counter_data = bytes_transferred;
{%- endif %}
{%- if performance_counters.enable_latency %}
            4'h3: perf_counter_data = latency_accumulator;
            4'h4: perf_counter_data = latency_samples;
{%- endif %}
{%- if performance_counters.enable_error_rate %}
            4'h5: perf_counter_data = error_rate_counter;
{%- endif %}
            4'h6: perf_counter_data = {16'h0, performance_sample_timer};
            4'h7: perf_counter_data = {24'h0, correctable_error_count};
            4'h8: perf_counter_data = {24'h0, uncorrectable_error_count};
            default: perf_counter_data = {{ performance_counters.counter_width }}'h0;
        endcase
    end

    // Performance status indicators
    assign performance_overflow = (transaction_counter == {{{ performance_counters.counter_width }}{1'b1}}) ||
{%- if performance_counters.enable_bandwidth %}
                                 (bandwidth_counter == {{{ performance_counters.counter_width }}{1'b1}}) ||
{%- endif %}
{%- if performance_counters.enable_latency %}
                                 (latency_accumulator == {{{ performance_counters.counter_width }}{1'b1}}) ||
{%- endif %}
{%- if performance_counters.enable_error_rate %}
                                 (error_rate_counter == {{{ performance_counters.counter_width }}{1'b1}}) ||
{%- endif %}
                                 1'b0;