{#- Device Configuration Module Template -#}
{{ header | safe }}

module device_config #(
    {# Ensure numeric/string aliases are used for formatting #}
    parameter VENDOR_ID = {{ (device_config.vendor_id_int | default(vendor_id_int | default(0x8086))) | sv_hex(16) }},
    parameter DEVICE_ID = {{ (device_config.device_id_int | default(device_id_int | default(0x1234))) | sv_hex(16) }},
    parameter CLASS_CODE = {{ (device_config.class_code | default('000000')) | sv_hex(24) }},
    parameter SUBSYSTEM_VENDOR_ID = {{ (device_config.subsystem_vendor_id_int | default(device_config.vendor_id_int | default(vendor_id_int | default(0x8086)))) | sv_hex(16) }},
    parameter SUBSYSTEM_DEVICE_ID = {{ (device_config.subsystem_device_id_int | default(device_config.device_id_int | default(device_id_int | default(0x1234)))) | sv_hex(16) }},
{%- for i in range(6) %}
    {# guard bars indexing and coerce numeric default for apertures #}
    {% from "_helpers.j2" import safe_attr %}
    parameter BAR{{ i }}_APERTURE = {{ (safe_attr(bars[i], 'size', 0) if (bars is defined and bars|length > i and bars[i] is not none) else 0) | sv_hex(32) }}{{ "," if not loop.last else "" }}
{%- endfor %}
) (
    // Configuration space interface
    output logic [31:0] cfg_device_id,
    output logic [31:0] cfg_class_code,
    output logic [31:0] cfg_subsystem_id,
    output logic [31:0] cfg_bar [0:5]
);

    // Device identification
    assign cfg_device_id = {DEVICE_ID, VENDOR_ID};
    assign cfg_class_code = {8'h00, CLASS_CODE};
    assign cfg_subsystem_id = {SUBSYSTEM_DEVICE_ID, SUBSYSTEM_VENDOR_ID};

    // BAR configuration
{%- for i in range(6) %}
    assign cfg_bar[{{ i }}] = BAR{{ i }}_APERTURE;
{%- endfor %}

endmodule
