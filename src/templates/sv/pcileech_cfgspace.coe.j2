; PCILeech Configuration Space COE File
; Generated by PCILeech Firmware Generator v1.0
;
; This file contains the configuration space data for PCILeech firmware
; based on the analyzed device configuration and behavior profile.
;
{# ========== Constants and Configuration ========== #}
{# Define constants for better maintainability and readability #}
{% set CAP_OFFSET_PM = 0x40 %}
{% set CAP_OFFSET_MSI = 0x48 %}
{% set CAP_OFFSET_MSIX = 0x50 %}
{% set CAP_OFFSET_PCIE = 0x60 %}
{% set CAP_OFFSET_AER = 0xA0 %}
{% set EXTENDED_CFG_START = 0x100 %}
{% set EXTENDED_CFG_END = 0x1000 %}

{# ========== Helper Functions and Macros ========== #}

{# Helper function to check if MSI-X is supported with consistent logic #}
{% macro is_msix_supported() %}
{{ msix_config and (msix_config.is_supported if hasattr(msix_config, 'is_supported') else (msix_config.num_vectors|default(0) > 0)) }}
{% endmacro %}

{# Macro for BAR validation #}
{% macro validate_bar_configs() %}
{% if not bar_config %}
{%- error "BAR configuration is required - no fallback values allowed to prevent generic firmware" %}
{% endif %}
{% endmacro %}

{# Macro for formatting BAR entries consistently - NO DEFAULT VALUES allowed for base address #}
{% macro render_bar(index, bar=None, is_io=false) %}
{% set bar_name = "BAR" ~ index %}
{% if bar %}
  {% if bar.size > 0 and hasattr(bar, 'get_size_encoding') %}
; {{ bar_name }}: {{ bar.bar_type }} BAR, Size: {{ "0x%X" | format(bar.size) }} bytes
{{ "%08X" | format(bar.get_size_encoding()) }},
  {% elif bar.base_address is defined %}
; {{ bar_name }}: Using base address
{{ "%08X" | format(bar.base_address) }},
  {% else %}
{%- error "BAR" ~ index ~ " has no size encoding or base address - no fallback values allowed" %}
  {% endif %}
{% else %}
  {% if not bar_config.bars or bar_config.bars|length == 0 %}
{%- error "No BAR configurations available - no fallback values allowed" %}
  {% else %}
; {{ bar_name }}: Disabled (not configured)
00000000,
  {% endif %}
{% endif %}
{% endmacro %}

{# ========== Comprehensive Validation ========== #}
{# Perform validation early for critical parameters #}
{% if not config_space %}
{%- error "Configuration space data is required - no fallback values allowed to prevent generic firmware" %}
{% endif %}

{% if not config_space.device_id or not config_space.vendor_id %}
{%- error "Device ID and Vendor ID are required - no fallback values allowed to prevent generic firmware" %}
{% endif %}

{% if not config_space.class_code or not config_space.revision_id %}
{%- error "Class Code and Revision ID are required - no fallback values allowed to prevent generic firmware" %}
{% endif %}

{% if not bar_config %}
{%- error "BAR configuration is required - no fallback values allowed to prevent generic firmware" %}
{% endif %}

{% if not device_config %}
{%- error "Device configuration is required - no fallback values allowed to prevent generic firmware" %}
{% endif %}

{% if not timing_config %}
{%- error "Timing configuration is required - no fallback values allowed to prevent generic firmware" %}
{% endif %}

{% if not pcileech_config %}
{%- error "PCILeech configuration is required - no fallback values allowed to prevent generic firmware" %}
{% endif %}

; Device Information:
; - Vendor ID: {{ config_space.vendor_id }}
; - Device ID: {{ config_space.device_id }}
; - Class Code: {{ config_space.class_code }}
; - Revision ID: {{ config_space.revision_id }}
;
; Generation Metadata:
{% if not generation_metadata or not generation_metadata.generated_at %}
{%- error "Generation metadata with timestamp is required - no fallback values allowed" %}
{% endif %}
; - Generated: {{ generation_metadata.generated_at }}
{% if not device_config.device_bdf %}
{%- error "Device BDF is required - no fallback values allowed" %}
{% endif %}
; - Device BDF: {{ device_config.device_bdf }}
; - Has Behavior Profile: {{ device_config.behavior_profile is defined }}
; - MSI-X Vectors: {{ msix_config.num_vectors|default(0) }}

memory_initialization_radix=16;
memory_initialization_vector=

; =====================================================================
; Standard PCI Configuration Header (0x00-0x3F)
; =====================================================================

; Vendor ID (0x00-0x01) and Device ID (0x02-0x03)
{{ config_space.device_id | string }}{{ config_space.vendor_id | string }},

; Command Register (0x04-0x05) and Status Register (0x06-0x07)
; Command: Memory Space Enable + Bus Master Enable
; Status: Capabilities List + Fast Back-to-Back + 66MHz Capable
{% if device_config.enable_dma_operations is not defined %}
{%- error "DMA operations configuration is required - enable_dma_operations must be explicitly set" %}
{% endif %}
{% set command_register = "0210" if device_config.enable_dma_operations else "0200" %}
{{ command_register }}0006,

; Revision ID (0x08), Programming Interface (0x09), Sub Class (0x0A), Base Class (0x0B)
{{ config_space.class_code | string }}{{ config_space.revision_id | string }},

; Cache Line Size (0x0C), Latency Timer (0x0D), Header Type (0x0E), BIST (0x0F)
00001010,

; Base Address Registers (0x10-0x27)
{% if not bar_config.bars or bar_config.bars|length == 0 %}
{%- error "BAR configurations are required - no fallback values allowed to prevent generic firmware" %}
{% endif %}
{% set has_bars = bar_config.bars and bar_config.bars|length > 0 %}

; BAR0 (0x10-0x13) - Memory BAR
{% if not has_bars %}
{%- error "At least one BAR configuration is required - no fallback values allowed" %}
{% else %}
{{ render_bar(0, bar_config.bars[0]) }}
{% endif %}

; BAR1 (0x14-0x17) - Upper 32 bits for 64-bit BAR or second BAR
{% if has_bars and bar_config.bars[0].is_64bit %}
; BAR1: Upper 32 bits of 64-bit BAR0
FFFFFFFF,
{% elif has_bars and bar_config.bars|length > 1 %}
{{ render_bar(1, bar_config.bars[1]) }}
{% else %}
; BAR1: Disabled (not configured)
00000000,
{% endif %}

; BAR2 (0x18-0x1B) - I/O BAR or third memory BAR
{% if has_bars and bar_config.bars|length > 2 %}
{{ render_bar(2, bar_config.bars[2], true) }}
{% else %}
; BAR2: Disabled (not configured)
00000000,
{% endif %}

; BAR3 (0x1C-0x1F) - Fourth BAR
{% if has_bars and bar_config.bars|length > 3 %}
{{ render_bar(3, bar_config.bars[3]) }}
{% else %}
; BAR3: Disabled (not configured)
00000000,
{% endif %}

; BAR4 (0x20-0x23) - Fifth BAR
{% if has_bars and bar_config.bars|length > 4 %}
{{ render_bar(4, bar_config.bars[4]) }}
{% else %}
; BAR4: Disabled (not configured)
00000000,
{% endif %}

; BAR5 (0x24-0x27) - Sixth BAR
{% if has_bars and bar_config.bars|length > 5 %}
{{ render_bar(5, bar_config.bars[5]) }}
{% else %}
; BAR5: Disabled (not configured)
00000000,
{% endif %}

; Cardbus CIS Pointer (0x28-0x2B) - Unused
00000000,

; Subsystem Vendor ID (0x2C-0x2D) and Subsystem ID (0x2E-0x2F)
{% set has_device = device is defined %}
{% set has_subsys_device_id = has_device and hasattr(device, 'subsys_device_id') %}
{% set has_subsys_vendor_id = has_device and hasattr(device, 'subsys_vendor_id') %}
{% set valid_subsys_device_id = has_subsys_device_id and device.subsys_device_id != "0000" %}
{% set valid_subsys_vendor_id = has_subsys_vendor_id and device.subsys_vendor_id != "0000" %}
{% if has_device and valid_subsys_device_id and valid_subsys_vendor_id %}
; Subsystem: {{ device.subsys_device_id }}:{{ device.subsys_vendor_id }}
{{ device.subsys_device_id | string }}{{ device.subsys_vendor_id | string }},
{% else %}
; Subsystem: Not configured
00000000,
{% endif %}

; Expansion ROM Base Address (0x30-0x33) - Disabled
00000000,

; Capabilities Pointer (0x34), Reserved (0x35-0x3B)
; Points to first capability at 0x40
{{ "%02X" | format(CAP_OFFSET_PM) }}000000,

; Interrupt Line (0x3C), Interrupt Pin (0x3D), Min_Gnt (0x3E), Max_Lat (0x3F)
; Using INTA (0x01) for interrupt pin
0000010B,

; =====================================================================
; PCI Capabilities
; =====================================================================

; Power Management Capability ({{ CAP_OFFSET_PM }}-{{ CAP_OFFSET_PM + 7 }})
; Cap ID=0x01, Next=0x50, PMC=0x0003, PMCSR=0x0000
{% set next_cap = CAP_OFFSET_MSI %}
{% set pm_cap_header = "0003" ~ "%02X" | format(next_cap) ~ "01" %}
{{ pm_cap_header }},
00000000,

{% set msix_enabled = is_msix_supported() %}

; MSI Capability ({{ CAP_OFFSET_MSI }}-{{ CAP_OFFSET_MSI + 7 }})
{% if not msix_enabled %}
; Cap ID=0x05, Next=0x60, Message Control=0x0080 (64-bit capable)
{% set next_cap = CAP_OFFSET_PCIE %}
{% set msi_cap_header = "0080" ~ "%02X" | format(next_cap) ~ "05" %}
{{ msi_cap_header }},
; Message Address Lower 32 bits
00000000,
{% else %}
; Reserved space when MSI-X is used
00000000,
00000000,
{% endif %}

; MSI-X Capability ({{ CAP_OFFSET_MSIX }}-{{ CAP_OFFSET_MSIX + 11 }})
{% if msix_enabled %}
{% if not msix_config.table_offset %}
{%- error "MSI-X table offset is required when MSI-X is enabled - no fallback values allowed" %}
{% endif %}
{% if not msix_config.pba_offset %}
{%- error "MSI-X PBA offset is required when MSI-X is enabled - no fallback values allowed" %}
{% endif %}
; Cap ID=0x11, Next=0x70, Message Control={{ "%04X" | format((msix_config.num_vectors - 1) | int) }}
{% set next_cap = CAP_OFFSET_PCIE %}
{% set msix_control = "%04X" | format((msix_config.num_vectors - 1) | int) %}
{% set msix_cap_header = msix_control ~ "%02X" | format(next_cap) ~ "11" %}
{{ msix_cap_header }},

; Table Offset/BIR: Offset={{ "%08X" | format(msix_config.table_offset | int) }}, BIR={{ msix_config.table_bir }}
{% set table_offset_bir = (msix_config.table_offset | int) + (msix_config.table_bir) %}
{{ "%08X" | format(table_offset_bir) }},

; PBA Offset/BIR: Offset={{ "%08X" | format(msix_config.pba_offset | int) }}, BIR={{ msix_config.pba_bir }}
{% set pba_offset_bir = (msix_config.pba_offset | int) + (msix_config.pba_bir) %}
{{ "%08X" | format(pba_offset_bir) }},
{% else %}
; No MSI-X capability
00000000,
00000000,
00000000,
{% endif %}

; PCIe Capability ({{ CAP_OFFSET_PCIE }}-{{ CAP_OFFSET_PCIE + 63 }})
; Cap ID=0x10, Next=0x00 (end of chain), PCIe Capabilities=0x0002
{% set next_cap = CAP_OFFSET_AER if device_config.enable_advanced_features else 0 %}
{% set pcie_cap_header = "0002" ~ "%02X" | format(next_cap) ~ "10" %}
{{ pcie_cap_header }},

; Device Capabilities
00000000,
; Device Control and Status
00000000,
; Link Capabilities
00000000,
; Link Control and Status
00000000,
; Slot Capabilities (if applicable)
00000000,
; Slot Control and Status
00000000,
; Root Capabilities
00000000,
; Root Control and Status
00000000,
; Device Capabilities 2
00000000,
; Device Control 2 and Status 2
00000000,
; Link Capabilities 2
00000000,
; Link Control 2 and Status 2
00000000,
; Slot Capabilities 2
00000000,
; Slot Control 2 and Status 2
00000000,

{% if device_config.enable_advanced_features %}
; =====================================================================
; Advanced Error Reporting Capability ({{ CAP_OFFSET_AER }}-{{ CAP_OFFSET_AER + 63 }})
; =====================================================================
; Cap ID=0x01, Next=0x00, AER Capabilities=0x0000
00000001,
; Uncorrectable Error Status
00000000,
; Uncorrectable Error Mask
00000000,
; Uncorrectable Error Severity
00000000,
; Correctable Error Status
00000000,
; Correctable Error Mask
00000000,
; Advanced Error Capabilities and Control
00000000,
; Header Log (4 DWORDs)
00000000,
00000000,
00000000,
00000000,
; Root Error Command
00000000,
; Root Error Status
00000000,
; Error Source Identification
00000000,
; Reserved
00000000,
00000000,
00000000,
{% endif %}

{% if device_config and hasattr(device_config, 'has_manufacturing_variance') and device_config.has_manufacturing_variance %}
; =====================================================================
; Device-Specific Configuration based on Manufacturing Variance
; =====================================================================
{% if timing_config and hasattr(timing_config, 'timing_regularity') %}
{% if timing_config.timing_regularity > 0.8 %}
; High regularity device - optimized timing
{% elif timing_config.timing_regularity < 0.3 %}
; Low regularity device - conservative timing
{% else %}
; Medium regularity device - standard timing
{% endif %}
{% endif %}
{% endif %}

; =====================================================================
; Extended Configuration Space ({{ EXTENDED_CFG_START }}-{{ EXTENDED_CFG_END - 1 }})
; =====================================================================
; Mostly zeros for basic implementation
{% for i in range(EXTENDED_CFG_START, EXTENDED_CFG_END, 4) %}
{% if loop.index % 16 == 1 %}
; Offset {{ "%03X" | format(i) }}
{% endif %}
00000000{% if not loop.last %},{% endif %}
{% endfor %};

; =====================================================================
; PCILeech-Specific Configuration Metadata
; =====================================================================
; This section contains device-specific configuration derived from behavior analysis
;
{% if device_config is defined and hasattr(device_config, 'behavior_profile') and device_config.behavior_profile %}
; Behavior Profile Summary:
; - Total Register Accesses: {{ device_config.total_register_accesses }}
; - Capture Duration: {{ device_config.capture_duration }}s
; - Timing Patterns: {{ device_config.timing_patterns_count }}
; - State Transitions: {{ device_config.state_transitions_count }}
{% endif %}
;
; PCILeech Configuration:
{% if not pcileech_config.command_timeout %}
{%- error "PCILeech command timeout is required - no fallback values allowed" %}
{% endif %}
; - Command Timeout: {{ pcileech_config.command_timeout }} cycles
{% if not pcileech_config.buffer_size %}
{%- error "PCILeech buffer size is required - no fallback values allowed" %}
{% endif %}
; - Buffer Size: {{ pcileech_config.buffer_size }} bytes
{% if pcileech_config.enable_dma is not defined %}
{%- error "PCILeech DMA operations setting is required - no fallback values allowed" %}
{% endif %}
; - DMA Operations: {{ pcileech_config.enable_dma }}
{% if pcileech_config.enable_scatter_gather is not defined %}
{%- error "PCILeech scatter-gather setting is required - no fallback values allowed" %}
{% endif %}
; - Scatter-Gather: {{ pcileech_config.enable_scatter_gather }}
;
; Timing Configuration:
{% if not timing_config.read_latency %}
{%- error "Timing read latency is required - no fallback values allowed" %}
{% endif %}
; - Read Latency: {{ timing_config.read_latency }} cycles
{% if not timing_config.write_latency %}
{%- error "Timing write latency is required - no fallback values allowed" %}
{% endif %}
; - Write Latency: {{ timing_config.write_latency }} cycles
{% if not timing_config.burst_length %}
{%- error "Timing burst length is required - no fallback values allowed" %}
{% endif %}
; - Burst Length: {{ timing_config.burst_length }}
{% if not timing_config.clock_frequency_mhz %}
{%- error "Timing clock frequency is required - no fallback values allowed" %}
{% endif %}
; - Clock Frequency: {{ timing_config.clock_frequency_mhz }} MHz
;
; BAR Configuration:
{% if bar_config.bar_index is not defined %}
{%- error "Primary BAR index is required - no fallback values allowed" %}
{% endif %}
; - Primary BAR Index: {{ bar_config.bar_index }}
{% if not bar_config.aperture_size %}
{%- error "BAR aperture size is required - no fallback values allowed" %}
{% endif %}
; - Aperture Size: {{ bar_config.aperture_size }} bytes
{% if bar_config.bar_type is not defined %}
{%- error "BAR type is required - no fallback values allowed" %}
{% endif %}
; - BAR Type: {{ bar_config.bar_type }} (0=32-bit, 1=64-bit)
{% if bar_config.prefetchable is not defined %}
{%- error "BAR prefetchable setting is required - no fallback values allowed" %}
{% endif %}
; - Prefetchable: {{ bar_config.prefetchable }}
