{#- MSI-X Table and PBA Implementation Template -#}
{{ header | safe }}

module msix_implementation (
    input  logic        clk,
    input  logic        reset_n,
    
    // MSI-X control inputs from capability registers
    input  logic        msix_enabled,        // Connected to MSI-X Message Control Enable bit (bit 15)
    input  logic        msix_function_mask,  // Connected to MSI-X Message Control Function Mask bit (bit 14)
    input  logic [10:0] msix_table_size,     // Connected to MSI-X Message Control Table Size field (bits 10:0)

    // MSI-X capability register interface for dynamic control
    input  logic        msix_cap_wr,     // Write strobe for MSI-X capability registers
    input  logic [31:0] msix_cap_addr,   // Address within MSI-X capability space
    input  logic [31:0] msix_cap_wdata,  // Write data for MSI-X capability registers
    input  logic [3:0]  msix_cap_be,     // Byte enables for MSI-X capability writes
    output logic [31:0] msix_cap_rdata,  // Read data from MSI-X capability registers

    // MSI-X interrupt generation interface
    output logic        msix_interrupt,  // MSI-X interrupt request
    output logic [10:0] msix_vector,     // MSI-X vector number
    output logic [63:0] msix_msg_addr,   // MSI-X message address
    output logic [31:0] msix_msg_data,   // MSI-X message data
    
    // BAR access interface
    input  logic [31:0] bar_addr,
    input  logic [31:0] bar_wr_data,
    input  logic [3:0]  bar_wr_be,
    input  logic        bar_wr_en,
    input  logic        bar_rd_en,
    input  logic [2:0]  bar_index,
    output logic [31:0] bar_rd_data,
    output logic        bar_access_valid
);

    // MSI-X Table parameters
    localparam NUM_MSIX = {{ num_msix | default(32) }};
    localparam MSIX_TABLE_BIR = {{ table_bir | default(4) }};
    localparam MSIX_TABLE_OFFSET = 32'h{{ "%08X" | format(table_offset | default(0)) }};
    localparam MSIX_PBA_BIR = {{ pba_bir | default(4) }};
    localparam MSIX_PBA_OFFSET = 32'h{{ "%08X" | format(pba_offset | default(2048)) }};
    localparam PBA_SIZE = {{ pba_size | default(((num_msix | default(32) + 31) // 32)) }};  // Number of 32-bit words needed for PBA

    // MSI-X Table storage
    (* ram_style="block" *) reg [31:0] msix_table[0:NUM_MSIX*4-1];  // 4 DWORDs per entry

    // MSI-X PBA storage
    reg [31:0] msix_pba[0:{{ (pba_size | default(((num_msix | default(32) + 31) // 32))) - 1 }}];

    // MSI-X Table access logic
    function logic is_msix_table_access(input logic [31:0] addr, input logic [2:0] bar_index);
        return (bar_index == MSIX_TABLE_BIR) &&
               (addr >= MSIX_TABLE_OFFSET) &&
               (addr < (MSIX_TABLE_OFFSET + NUM_MSIX * 16));
    endfunction

    // MSI-X PBA access logic
    function logic is_msix_pba_access(input logic [31:0] addr, input logic [2:0] bar_index);
        return (bar_index == MSIX_PBA_BIR) &&
               (addr >= MSIX_PBA_OFFSET) &&
               (addr < (MSIX_PBA_OFFSET + PBA_SIZE * 4));
    endfunction

    // MSI-X Table read logic
    function logic [31:0] msix_table_read(input logic [31:0] addr);
        logic [31:0] table_addr;
        table_addr = (addr - MSIX_TABLE_OFFSET) >> 2;  // Convert to DWORD index
        return msix_table[table_addr];
    endfunction

    // MSI-X Table write logic with byte enables
    task msix_table_write(input logic [31:0] addr, input logic [31:0] data, input logic [3:0] byte_enable);
        logic [31:0] table_addr;
        logic [31:0] current_value;

        table_addr = (addr - MSIX_TABLE_OFFSET) >> 2;  // Convert to DWORD index
        current_value = msix_table[table_addr];

        // Apply byte enables
        if (byte_enable[0]) current_value[7:0] = data[7:0];
        if (byte_enable[1]) current_value[15:8] = data[15:8];
        if (byte_enable[2]) current_value[23:16] = data[23:16];
        if (byte_enable[3]) current_value[31:24] = data[31:24];

        msix_table[table_addr] = current_value;
    endtask

    // MSI-X PBA read logic
    function logic [31:0] msix_pba_read(input logic [31:0] addr);
        logic [31:0] pba_addr;
        pba_addr = (addr - MSIX_PBA_OFFSET) >> 2;  // Convert to DWORD index
        return msix_pba[pba_addr];
    endfunction

    // MSI-X PBA write logic (typically read-only, but implemented for completeness)
    task msix_pba_write(input logic [31:0] addr, input logic [31:0] data, input logic [3:0] byte_enable);
        logic [31:0] pba_addr;
        logic [31:0] current_value;

        pba_addr = (addr - MSIX_PBA_OFFSET) >> 2;  // Convert to DWORD index
        current_value = msix_pba[pba_addr];

        // Apply byte enables
        if (byte_enable[0]) current_value[7:0] = data[7:0];
        if (byte_enable[1]) current_value[15:8] = data[15:8];
        if (byte_enable[2]) current_value[23:16] = data[23:16];
        if (byte_enable[3]) current_value[31:24] = data[31:24];

        msix_pba[pba_addr] = current_value;
    endtask

    // MSI-X vector validation
    function logic is_valid_msix_vector(input logic [10:0] vector);
        return (vector < NUM_MSIX) && msix_enabled && !msix_function_mask;
    endfunction

    // Enhanced MSI-X interrupt delivery with proper validation
    task msix_deliver_interrupt_validated(input logic [10:0] vector);
        logic vector_masked;
        logic [31:0] table_addr;
        logic [31:0] control_dword;
        logic [31:0] pba_dword_idx;
        logic [4:0] pba_bit_idx;

        // Validate vector number
        if (!is_valid_msix_vector(vector)) begin
            $display("MSI-X Error: Invalid vector %0d or MSI-X disabled", vector);
            return;
        end

        // Get control DWORD (fourth DWORD in the entry)
        table_addr = vector * 4 + 3;
        control_dword = msix_table[table_addr];

        // Check if vector is masked (bit 0 of control DWORD)
        vector_masked = control_dword[0];

        if (!vector_masked) begin
            // Vector is enabled and not masked - deliver interrupt
            logic [63:0] message_address;
            logic [31:0] message_data;

            // Extract message address from MSI-X table entry
            message_address[31:0] = msix_table[vector * 4];      // Lower address DWORD
            message_address[63:32] = msix_table[vector * 4 + 1]; // Upper address DWORD

            // Extract message data from MSI-X table entry
            message_data = msix_table[vector * 4 + 2];

            // Set interrupt outputs
            msix_interrupt <= 1'b1;
            msix_vector <= vector;
            msix_msg_addr <= message_address;
            msix_msg_data <= message_data;

            $display("MSI-X Interrupt: vector=%0d, addr=0x%016h, data=0x%08h",
                     vector, message_address, message_data);
        end else begin
            // Vector is masked - set pending bit in PBA
            pba_dword_idx = vector >> 5;  // Divide by 32 to get DWORD index
            pba_bit_idx = vector & 5'h1F;  // Modulo 32 to get bit position

            if (pba_dword_idx < PBA_SIZE) begin
                msix_pba[pba_dword_idx] <= msix_pba[pba_dword_idx] | (32'h1 << pba_bit_idx);
                $display("MSI-X Pending: vector=%0d set in PBA[%0d][%0d]",
                         vector, pba_dword_idx, pba_bit_idx);
            end
        end
    endtask

    // Legacy MSI-X interrupt delivery logic (deprecated - use msix_deliver_interrupt_validated)
    task msix_deliver_interrupt(input logic [10:0] vector);
        // Redirect to validated version for backward compatibility
        msix_deliver_interrupt_validated(vector);
    endtask

    // BAR access handling
    always_ff @(posedge clk or negedge reset_n) begin
        if (!reset_n) begin
            bar_rd_data <= 32'h0;
            bar_access_valid <= 1'b0;
            msix_interrupt <= 1'b0;
            msix_vector <= 11'h0;
            msix_msg_addr <= 64'h0;
            msix_msg_data <= 32'h0;
        end else begin
            bar_access_valid <= 1'b0;
            
            if (bar_wr_en) begin
                if (is_msix_table_access(bar_addr, bar_index)) begin
                    msix_table_write(bar_addr, bar_wr_data, bar_wr_be);
                    bar_access_valid <= 1'b1;
                end else if (is_msix_pba_access(bar_addr, bar_index)) begin
                    msix_pba_write(bar_addr, bar_wr_data, bar_wr_be);
                    bar_access_valid <= 1'b1;
                end
            end
            
            if (bar_rd_en) begin
                if (is_msix_table_access(bar_addr, bar_index)) begin
                    bar_rd_data <= msix_table_read(bar_addr);
                    bar_access_valid <= 1'b1;
                end else if (is_msix_pba_access(bar_addr, bar_index)) begin
                    bar_rd_data <= msix_pba_read(bar_addr);
                    bar_access_valid <= 1'b1;
                end
            end
        end
    end

    // Initialize MSI-X table and PBA
    initial begin
        // Initialize MSI-X table to zeros
        for (int i = 0; i < NUM_MSIX * 4; i++) begin
            msix_table[i] = 32'h0;
        end

        // Initialize MSI-X PBA to zeros
        for (int i = 0; i < PBA_SIZE; i++) begin
            msix_pba[i] = 32'h0;
        end
    end

    // Assign capability read data (not used in this implementation)
    assign msix_cap_rdata = 32'h0;

endmodule