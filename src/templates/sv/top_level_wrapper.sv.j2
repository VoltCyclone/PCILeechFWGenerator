{#- PCILeech Top-Level Wrapper Template -#}
{{ header | safe }}

module pcileech_top (
    // Clock and reset
    input  logic        clk,
    input  logic        reset_n,

    // PCIe interface (connect to PCIe hard IP)
    input  logic [31:0] pcie_rx_data,
    input  logic        pcie_rx_valid,
    output logic [31:0] pcie_tx_data,
    output logic        pcie_tx_valid,

    // Configuration space interface
    input  logic        cfg_ext_read_received,
    input  logic        cfg_ext_write_received,
    input  logic [9:0]  cfg_ext_register_number,
    input  logic [3:0]  cfg_ext_function_number,
    input  logic [31:0] cfg_ext_write_data,
    input  logic [3:0]  cfg_ext_write_byte_enable,
    output logic [31:0] cfg_ext_read_data,
    output logic        cfg_ext_read_data_valid,

    // MSI-X interrupt interface
    output logic        msix_interrupt,
    output logic [10:0] msix_vector,
    input  logic        msix_interrupt_ack,

    // Debug/status outputs
    output logic [31:0] debug_status,
    output logic        device_ready
);

    // Internal signals
    logic [31:0] bar_addr;
    logic [31:0] bar_wr_data;
    logic        bar_wr_en;
    logic        bar_rd_en;
    logic [31:0] bar_rd_data;
    logic [3:0]  bar_wr_be;

    // Instantiate BAR controller
    pcileech_tlps128_bar_controller bar_controller (
        .clk(clk),
        .reset_n(reset_n),
        .tlp_rx_valid(pcie_rx_valid),
        .tlp_rx_data(pcie_rx_data),
        .tlp_rx_sop(1'b1),
        .tlp_rx_eop(1'b1),
        .tlp_rx_empty(4'h0),
        .tlp_rx_err(1'b0),
        .tlp_rx_ready(),
        .tlp_tx_valid(pcie_tx_valid),
        .tlp_tx_data(pcie_tx_data),
        .tlp_tx_sop(),
        .tlp_tx_eop(),
        .tlp_tx_empty(),
        .tlp_tx_ready(1'b1),
        .tlp_tx_err(),
        .bar_addr(bar_addr),
        .bar_wr_data(bar_wr_data),
        .bar_wr_be(bar_wr_be),
        .bar_wr_en(bar_wr_en),
        .bar_rd_en(bar_rd_en),
        .bar_rd_data(bar_rd_data),
        .bar_rd_valid(),
        .cfg_ext_read_received(cfg_ext_read_received),
        .cfg_ext_write_received(cfg_ext_write_received),
        .cfg_ext_register_number(cfg_ext_register_number),
        .cfg_ext_function_number(cfg_ext_function_number),
        .cfg_ext_write_data(cfg_ext_write_data),
        .cfg_ext_write_byte_enable(cfg_ext_write_byte_enable),
        .cfg_ext_read_data(cfg_ext_read_data),
        .cfg_ext_read_data_valid(cfg_ext_read_data_valid),
        .msix_interrupt(msix_interrupt),
        .msix_vector(msix_vector),
        .msix_interrupt_ack(msix_interrupt_ack),
        .pcileech_enable(1'b1),
        .pcileech_command(32'h0),
        .pcileech_address(64'h0),
        .pcileech_length(32'h0),
        .pcileech_status(),
        .pcileech_ready(),
        .dma_read_req(),
        .dma_read_addr(),
        .dma_read_len(),
        .dma_read_ack(1'b0),
        .dma_read_data(128'h0),
        .dma_read_valid(1'b0),
        .dma_write_req(),
        .dma_write_addr(),
        .dma_write_len(),
        .dma_write_data(),
        .dma_write_ack(1'b0),
        .error_status(),
        .performance_counter_0(),
        .performance_counter_1(),
        .debug_state()
    );

    // Basic assignments
    assign device_ready = 1'b1;
    assign debug_status = 32'h{{ vendor_id }}{{ device_id }};

    // Simple TLP processing
    always_ff @(posedge clk or negedge reset_n) begin
        if (!reset_n) begin
            bar_addr <= 32'h0;
            bar_wr_data <= 32'h0;
            bar_wr_en <= 1'b0;
            bar_rd_en <= 1'b0;
            bar_wr_be <= 4'h0;
        end else begin
            // Process incoming TLPs for BAR access
            bar_addr <= 32'h0;
            bar_wr_data <= 32'h0;
            bar_wr_en <= 1'b0;
            bar_rd_en <= 1'b0;
            bar_wr_be <= 4'hF;
        end
    end

endmodule