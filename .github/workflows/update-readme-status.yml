name: Update README Status

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
  schedule:
    # Update status daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  update-readme:
    runs-on: ubuntu-latest
    # Only run on main branch to avoid conflicts with feature branches
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Get latest workflow run status
      id: workflow-status
      run: |
        # Get the latest CI workflow run
        WORKFLOW_RUN=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/workflows/ci.yml/runs?per_page=1" | \
          jq -r '.workflow_runs[0]' 2>/dev/null || echo '{}')
        
        if [ "$WORKFLOW_RUN" = "{}" ] || [ "$WORKFLOW_RUN" = "null" ]; then
          echo "status=unknown" >> $GITHUB_OUTPUT
          echo "run_id=" >> $GITHUB_OUTPUT
          echo "created_at=" >> $GITHUB_OUTPUT
          echo "jobs=" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        STATUS=$(echo "$WORKFLOW_RUN" | jq -r '.conclusion // .status // "unknown"')
        RUN_ID=$(echo "$WORKFLOW_RUN" | jq -r '.id // ""')
        CREATED_AT=$(echo "$WORKFLOW_RUN" | jq -r '.created_at // ""')
        
        echo "status=$STATUS" >> $GITHUB_OUTPUT
        echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
        echo "created_at=$CREATED_AT" >> $GITHUB_OUTPUT
        
        # Get job statuses if we have a valid run ID
        if [ -n "$RUN_ID" ] && [ "$RUN_ID" != "null" ]; then
          JOBS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/$RUN_ID/jobs" | \
            jq -r '.jobs[]? | "\(.name):\(.conclusion // .status)"' 2>/dev/null || echo "")
        else
          JOBS=""
        fi
        
        echo "jobs<<EOF" >> $GITHUB_OUTPUT
        echo "$JOBS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Get package version
      id: version
      run: |
        # Try to get version using setuptools_scm
        pip install setuptools_scm
        VERSION=$(python -c "
        try:
            import setuptools_scm
            print(setuptools_scm.get_version())
        except Exception as e:
            try:
                import pkg_resources
                print(pkg_resources.get_distribution('pcileech-fw-generator').version)
            except:
                try:
                    with open('setup.py', 'r') as f:
                        content = f.read()
                        import re
                        match = re.search(r'version=[\"'](.*?)[\"']', content)
                        if match:
                            print(match.group(1))
                        else:
                            print('dev')
                except:
                    print('dev')
        " 2>/dev/null || echo "dev")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Update README status section
      run: python scripts/update_readme_status.py
      env:
        WORKFLOW_STATUS: ${{ steps.workflow-status.outputs.status }}
        WORKFLOW_RUN_ID: ${{ steps.workflow-status.outputs.run_id }}
        WORKFLOW_CREATED_AT: ${{ steps.workflow-status.outputs.created_at }}
        WORKFLOW_JOBS: ${{ steps.workflow-status.outputs.jobs }}
        PACKAGE_VERSION: ${{ steps.version.outputs.version }}
        GITHUB_REPOSITORY: ${{ github.repository }}
    
    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if we have any changes to commit
        if git diff --quiet README.md; then
          echo "No changes to README.md"
          exit 0
        fi
        
        echo "Changes detected in README.md, committing..."
        git add README.md
        git commit -m "ðŸ¤– Update README CI status [skip ci]"
        
        # Try to push, but don't fail if there are conflicts
        if ! git push; then
          echo "Push failed, possibly due to conflicts. This is normal for concurrent updates."
          exit 0
        fi