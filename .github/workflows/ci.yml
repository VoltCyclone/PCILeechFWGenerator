name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install types-setuptools types-psutil
    
    - name: Lint with flake8
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check src/ tests/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only src/ tests/
    
    - name: Type check with mypy
      run: |
        mypy --config-file mypy_dev.ini src/ --exclude 'tests/'
      continue-on-error: true
    
    - name: Security check with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
      continue-on-error: true
    
    - name: Test with pytest
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: ramseymcgrath/PCILeechFWGenerator
        files: ./coverage.xml  
        flags: unittests
        fail_ci_if_error: false

  test-tui:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies with TUI
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Install dependencies
      run: pip install pytest pytest-asyncio
    
    - name: Test TUI components
      run: |
        pytest tests/ -k "tui" --cov=src.tui --cov-report=xml

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: ramseymcgrath/PCILeechFWGenerator
        files: ./coverage.xml  
        flags: unittests
        fail_ci_if_error: false
        
    - name: Test TUI import
      run: |
        python -c "from src.tui.main import PCILeechTUI; print('TUI import successful')"

  build-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Test installation
      run: |
        pip install dist/*.whl
        pcileech-generate --help || echo "CLI help test completed"
        python -c "import src; print(f'Package version: {src.__version__}')"

  container-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build container
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Containerfile
        push: false
        tags: pcileech-fw-generator:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test container
      run: |
        docker run --rm pcileech-fw-generator:test python --version
        docker run --rm pcileech-fw-generator:test python -c "import src; print('Container import test passed')"
  docs:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme
        pip install -r requirements.txt
    
    - name: Check documentation build
      run: |
        # Create basic Sphinx documentation structure if it doesn't exist
        if [ ! -f "docs/conf.py" ]; then
          mkdir -p docs
          sphinx-quickstart -q -p "PCILeech Firmware Generator" -a "Ramsey McGrath" -v "2.0.0" --ext-autodoc --ext-viewcode --makefile --no-batchfile docs
        fi
        # Build documentation
        cd docs && make html || echo "Documentation build test completed"