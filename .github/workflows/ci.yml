name: CI

on:
  push:
    branches: [ main, advanced-behavior-handling, missing-template-context ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  # Skip version update check in CI to avoid conflicts
  PCILEECH_DISABLE_UPDATE_CHECK: "1"

jobs:
  systemverilog-validation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for setuptools_scm
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Validate SystemVerilog Templates
      run: |
        python scripts/validate_systemverilog_templates.py
    
    - name: Validate Project SystemVerilog Configuration
      run: |
        python scripts/validate_project_systemverilog.py
    
    - name: Validate Generation Patterns
      run: |
        python scripts/validate_generation_patterns.py
    
    - name: Check Template Syntax
      run: |
        # Install minimal dependencies for template validation
        python -m pip install --upgrade pip
        pip install jinja2 pyyaml
        # Install project to access custom template renderer
        pip install -e .
        
        # Basic template syntax validation - ensure templates can be parsed
        python -c "
        import sys
        sys.path.insert(0, 'src')
        from pathlib import Path
        
        try:
            from templating.template_renderer import TemplateRenderer
            
            renderer = TemplateRenderer('src/templates')
            
            # Find all SystemVerilog/Verilog templates
            template_dir = Path('src/templates')
            sv_templates = list(template_dir.glob('**/*.sv.j2'))
            v_templates = list(template_dir.glob('**/*.v.j2'))
            
            print(f'Found {len(sv_templates)} SystemVerilog and {len(v_templates)} Verilog templates')
            
            # Basic syntax check - ensure Jinja2 can parse the templates
            for template_path in sv_templates + v_templates:
                rel_path = template_path.relative_to(template_dir)
                try:
                    # Test template parsing (without rendering)
                    template = renderer.env.get_template(str(rel_path))
                    print(f'✅ Template syntax valid: {rel_path}')
                except Exception as e:
                    print(f'❌ Template syntax error in {rel_path}: {e}')
                    sys.exit(1)
            
            print('✅ All template syntax checks passed!')
            
        except ImportError as e:
            print(f'⚠️  Could not import from templating module: {e}')
            print('Skipping template syntax validation')
            sys.exit(0)
        except Exception as e:
            print(f'❌ Template syntax validation failed: {e}')
            sys.exit(1)
        "
    
    - name: Validate Template Variables (Non-blocking)
      run: |
        # Install project for template validator
        pip install -e .
        
        echo "🔍 Running template variable validation..."
        python scripts/validate_template_variables.py \
          --format summary \
          --verbose || echo "⚠️ Template validation found warnings (non-blocking)"
      continue-on-error: true

  template-variable-validation:
    runs-on: ubuntu-latest
    # Only run when template files change
    if: contains(github.event.head_commit.modified, 'src/templates/') || contains(github.event.head_commit.modified, 'src/templating/') || contains(github.event.head_commit.modified, 'scripts/validate_template_variables.py') || github.event_name == 'pull_request'
    
    steps:
    - name: 🛒 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for setuptools_scm
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: 📦 Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-template-validation-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-template-validation-
          ${{ runner.os }}-pip-
    
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jinja2 pyyaml
        # Install minimal project dependencies for template validation
        pip install -e .
    
    - name: 🔍 Validate template variables (Non-blocking)
      id: template_check
      run: |
        echo "🔍 Running template variable analysis..."
        python scripts/validate_template_variables.py \
          --format summary \
          --output-file template_validation_summary.txt \
          --verbose
        
        echo "📊 Summary:"
        cat template_validation_summary.txt
        
        # Store results for later steps
        echo "validation_summary<<EOF" >> $GITHUB_OUTPUT
        cat template_validation_summary.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Check if we should warn about critical errors (not warnings)
        if grep -q "Critical Errors: [1-9]" template_validation_summary.txt; then
          echo "has_critical_errors=true" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "has_critical_errors=false" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true  # Don't fail the build for warnings
    
    - name: 📋 Generate detailed report
      run: |
        echo "📋 Generating detailed template analysis report..."
        python scripts/validate_template_variables.py \
          --format text \
          --generate-fixes \
          --output-file template_validation_report.txt \
          --verbose
        
        echo "✅ Report generated: template_validation_report.txt"
    
    - name: 📤 Upload validation reports
      uses: actions/upload-artifact@v4
      with:
        name: template-validation-reports
        path: |
          template_validation_summary.txt
          template_validation_report.txt
        retention-days: 30
    
    - name: 📝 Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const summary = fs.readFileSync('template_validation_summary.txt', 'utf8');
            const summaryLines = summary.split('\n');
            
            const status = summaryLines[0];
            const isPass = status.includes('PASS');
            
            const body = `## 🔍 Template Validation Results
          
          ${isPass ? '✅' : '⚠️'} **${status}**
          
          \`\`\`
          ${summary}
          \`\`\`
          
          ${isPass 
            ? '🎉 All template variables are properly defined!' 
            : '⚠️ Some template variables may need attention. Check the detailed report in the workflow artifacts.'}
          
          📋 **Detailed Report**: Check the \`template-validation-reports\` artifact for complete analysis and suggested fixes.
          `;
          
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          } catch (error) {
            console.log('Could not read validation summary or post comment:', error);
          }
    
    - name: ⚠️ Set warning annotation
      if: steps.template_check.outputs.has_critical_errors == 'true'
      run: |
        echo "::error::Template validation found critical errors that need to be fixed."
        echo "Check the detailed report for specific issues."
    
    - name: 📝 Set warning for template issues
      if: steps.template_check.outcome != 'success' && steps.template_check.outputs.has_critical_errors != 'true'
      run: |
        echo "::warning::Template validation found warnings. Consider addressing these for better template reliability."
        echo "Use --warnings-as-errors flag locally to treat these as blocking issues."

  template-syntax-validation:
    runs-on: ubuntu-latest
    # Only run when template files change
    if: contains(github.event.head_commit.modified, 'src/templates/') || contains(github.event.head_commit.modified, 'src/templating/') || github.event_name == 'pull_request'
    
    steps:
    - name: 🛒 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jinja2 pyyaml
        # Install project for access to custom template renderer
        pip install -e .
    
    - name: ✅ Validate template syntax
      run: |
        python -c "
        import sys
        from pathlib import Path
        
        try:
            # Import project's template renderer with custom filters and extensions
            sys.path.insert(0, 'src')
            from templating.template_renderer import TemplateRenderer
            from jinja2 import TemplateSyntaxError
            
            template_dir = Path('src/templates')
            if not template_dir.exists():
                print('❌ Template directory not found')
                sys.exit(1)
            
            # Use project's template renderer with all custom filters and extensions
            renderer = TemplateRenderer(template_dir)
            
            # Find all template files
            templates = list(template_dir.rglob('*.j2')) + list(template_dir.rglob('*.jinja')) + list(template_dir.rglob('*.jinja2'))
            
            print(f'🔍 Checking syntax of {len(templates)} templates...')
            
            errors = 0
            for template_path in templates:
                rel_path = template_path.relative_to(template_dir)
                try:
                    # Test template parsing (without rendering)
                    template = renderer.env.get_template(str(rel_path))
                    print(f'✅ {rel_path}')
                except TemplateSyntaxError as e:
                    print(f'❌ {rel_path}: Syntax error at line {e.lineno}: {e.message}')
                    errors += 1
                except Exception as e:
                    print(f'❌ {rel_path}: {e}')
                    errors += 1
            
            if errors > 0:
                print(f'\n❌ Found {errors} template syntax errors')
                sys.exit(1)
            else:
                print(f'\n✅ All {len(templates)} templates have valid syntax!')
                
        except ImportError as e:
            print(f'⚠️  Could not import template renderer: {e}')
            print('Falling back to basic Jinja2 validation...')
            
            # Fallback to basic validation
            from jinja2 import Environment, FileSystemLoader, TemplateSyntaxError
            
            template_dir = Path('src/templates')
            env = Environment(loader=FileSystemLoader(template_dir))
            
            templates = list(template_dir.rglob('*.j2')) + list(template_dir.rglob('*.jinja')) + list(template_dir.rglob('*.jinja2'))
            
            print(f'🔍 Basic syntax check of {len(templates)} templates...')
            
            errors = 0
            for template_path in templates:
                rel_path = template_path.relative_to(template_dir)
                try:
                    template = env.get_template(str(rel_path))
                    print(f'✅ {rel_path}')
                except TemplateSyntaxError as e:
                    print(f'❌ {rel_path}: Basic syntax error at line {e.lineno}: {e.message}')
                    errors += 1
                except Exception as e:
                    print(f'❌ {rel_path}: {e}')
                    errors += 1
            
            if errors > 0:
                print(f'\n⚠️  Found {errors} basic template syntax errors (may include custom filter/tag issues)')
            else:
                print(f'\n✅ Basic syntax validation passed!')
        "

  unit-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for setuptools_scm
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install types-setuptools types-psutil
        pip install pytest-asyncio
          
    - name: Test with pytest
      env:
        CI: true
        PYTEST_CURRENT_TEST: true
      run: |
        pytest tests/ -k "not tui" -m "not hardware" --cov=src --cov-report=xml --cov-report=term-missing
      continue-on-error: true

    - name: Test version automation
      env:
        CI: true
      run: |
        python scripts/test_version_update.py
      continue-on-error: true

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: ramseymcgrath/PCILeechFWGenerator
        files: ./coverage.xml  
        flags: unittests
        fail_ci_if_error: false


  tui-test:
    runs-on: ubuntu-latest
    needs: unit-test
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for setuptools_scm
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-tui-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install TUI test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install "textual>=4.0.0" pytest-asyncio
        pip install types-setuptools types-psutil
          
    - name: Run TUI integration tests
      env:
        CI: true
        PYTEST_CURRENT_TEST: true
        # Ensure headless mode for textual
        TERM: xterm-256color
        TEXTUAL_HEADLESS: true
      run: |
        # Run TUI tests in headless mode
        pytest tests/test_tui_integration.py -v --tb=short -m tui
      continue-on-error: true


  integration:
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for setuptools_scm
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt -r requirements-test.txt

      - name: Install Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman
          podman info

      - name: Create mock sysfs
        run: ./tests/create_mock_sysfs.sh tests/mock_sysfs

      - name: Run integration (host + podman)
        env:
          BOARD_NAME: pcileech_35t325_x1
        run: |
          . .venv/bin/activate
          bash tests/integration_smoke.sh

      - name: Upload integration logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-logs
          path: tests/integration-logs/*

  import-analysis:
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for setuptools_scm
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Import Analysis
      run: |
        python scripts/analyze_imports.py > import_analysis_report.txt
    
    - name: Check for Import Issues
      run: |
        # Extract summary from report
        grep -A 5 "=== SUMMARY ===" import_analysis_report.txt
        
        # Optional: Fail CI if circular imports are found
        if grep -q "⚠️  Found .* circular import chain" import_analysis_report.txt; then
          echo "::warning::Circular imports detected! Please check the report for details."
          # Uncomment to make CI fail on circular imports:
          # exit 1
        fi
        
        # Optional: Warn about unused imports
        if grep -q "⚠️  Found unused imports in" import_analysis_report.txt; then
          echo "::warning::Unused imports detected! Consider cleaning them up."
        fi
    
    - name: Upload Import Analysis Report
      uses: actions/upload-artifact@v4
      with:
        name: import-analysis-report
        path: import_analysis_report.txt
        retention-days: 7

  docs:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for setuptools_scm
        submodules: recursive  # Fetch site submodule
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        # Install main project dependencies
        pip install -r requirements.txt
        # Install documentation dependencies
        pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints myst-parser
        pip install mkdocs mkdocs-material mkdocstrings[python]
    
    - name: Generate API documentation
      run: |
        # Generate API docs using our custom script
        python scripts/generate_api_docs.py \
          --source src \
          --output site/docs \
          --use-mkdocstrings \
          --clean
    
    - name: Build MkDocs documentation
      run: |
        cd site
        mkdocs build --strict --verbose
    
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation-site
        path: site/site/
        retention-days: 30

  packaging:
    runs-on: ubuntu-latest
    needs: unit-test
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for setuptools_scm
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build setuptools setuptools_scm wheel
    
    - name: Test package metadata
      run: |
        python -c "
        import setuptools_scm
        version = setuptools_scm.get_version()
        print(f'Package version: {version}')
        "
    
    - name: Build source distribution
      run: |
        python -m build --sdist --no-isolation
    
    - name: Build wheel
      run: |
        python -m build --wheel --no-isolation
    
    - name: Check package contents
      run: |
        python -m pip install twine
        twine check dist/*
    
    - name: Get package version
      id: version
      run: |
        VERSION=$(python -c "import setuptools_scm; print(setuptools_scm.get_version())")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Package version: $VERSION"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-packages-${{ steps.version.outputs.version }}
        path: dist/
        retention-days: 30