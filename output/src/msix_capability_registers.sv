//==============================================================================
// MSI-X Capability Register Management
// Generated by PCILeech Firmware Generator
//
// Handles dynamic configuration and control of MSI-X functionality
//==============================================================================

module msix_capability_registers (
    input wire clk,
    input wire reset_n,
    
    // MSI-X capability register interface
    input wire        msix_cap_wr,     // Write strobe for MSI-X capability registers
    input wire [31:0] msix_cap_addr,   // Address within MSI-X capability space
    input wire [31:0] msix_cap_wdata,  // Write data for MSI-X capability registers
    input wire [3:0]  msix_cap_be,     // Byte enables for MSI-X capability writes
    output reg [31:0] msix_cap_rdata,  // Read data from MSI-X capability registers
    
    // MSI-X control outputs
    output wire        msix_enabled,
    output wire        msix_function_mask,
    output wire [10:0] msix_table_size
);

// MSI-X Message Control register fields
reg        msix_enable_reg;           // MSI-X Enable bit
reg        msix_function_mask_reg;    // Function Mask bit
reg [10:0] msix_table_size_reg;       // Table Size field (read-only)

// MSI-X Table Offset/BIR and PBA Offset/BIR registers (read-only)
reg [31:0] msix_table_offset_bir;
reg [31:0] msix_pba_offset_bir;

// Initialize MSI-X capability registers
initial begin
    msix_enable_reg = 1'b0;
    msix_function_mask_reg = 1'b0;
    msix_table_size_reg = 31;  // Table size - 1
    msix_table_offset_bir = 4;
    msix_pba_offset_bir = 2052;
end

// MSI-X capability register read/write logic
always_ff @(posedge clk or negedge reset_n) begin
    if (!reset_n) begin
        msix_enable_reg <= 1'b0;
        msix_function_mask_reg <= 1'b0;
    end else if (msix_cap_wr) begin
        // Handle writes to MSI-X Message Control register
        case (msix_cap_addr[3:0])
            4'h2: begin  // Message Control register (offset 2)
                if (msix_cap_be[1]) msix_enable_reg <= msix_cap_wdata[15];
                if (msix_cap_be[1]) msix_function_mask_reg <= msix_cap_wdata[14];
                // Table size is read-only, ignore writes
            end
            // Table Offset/BIR and PBA Offset/BIR are read-only
            default: begin
                // Other offsets are read-only or reserved
            end
        endcase
    end
end

// MSI-X capability register read data multiplexer
always_comb begin
    case (msix_cap_addr[3:0])
        4'h0: msix_cap_rdata = {8'h00, 8'h11};  // Next pointer and Capability ID
        4'h2: msix_cap_rdata = {msix_enable_reg, msix_function_mask_reg, 3'b000, msix_table_size_reg};
        4'h4: msix_cap_rdata = msix_table_offset_bir;
        4'h8: msix_cap_rdata = msix_pba_offset_bir;
        default: msix_cap_rdata = 32'h00000000;
    endcase
end

// Connect control signals to the registers
assign msix_enabled = msix_enable_reg;
assign msix_function_mask = msix_function_mask_reg;
assign msix_table_size = msix_table_size_reg;

// MSI-X vector validation
function logic is_valid_msix_vector(input logic [10:0] vector);
    return (vector < 32) && msix_enabled && !msix_function_mask;  // Hardcoded to 32 vectors
endfunction

endmodule