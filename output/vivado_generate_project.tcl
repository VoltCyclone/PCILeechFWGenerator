# PCILeech Firmware Build - pcileech_75t484_x1
# PCILeech Unified Project Generation Script
# Generated by PCILeechFWGenerator - PCILeech Integration
# Board: pcileech_75t484_x1
# FPGA: xc7a75tfgg484-2
# Family: artix7

# Set error handling
set_msg_config -id {Common 17-55} -suppress
set_msg_config -id {Vivado 12-1387} -suppress

# Project configuration
set project_name "pcileech_firmware"
set project_dir "./vivado_project"
set fpga_part "xc7a75tfgg484-2"
set board_name "pcileech_75t484_x1"

# PCILeech directory structure
set src_dir "src"
set ip_dir "ip"

# Create project directory if it doesn't exist
file mkdir $project_dir

# Create Vivado project
create_project $project_name $project_dir -part $fpga_part -force

# Set project properties
set_property target_language Verilog [current_project]
set_property simulator_language Mixed [current_project]
set_property default_lib xil_defaultlib [current_project]



# Create source directory structure
file mkdir [file join $project_dir $src_dir]
file mkdir [file join $project_dir $ip_dir]

puts "Created PCILeech directory structure:"
puts "  Source directory: $src_dir"
puts "  IP directory: $ip_dir"

# Add SystemVerilog source files

# Add all SystemVerilog files from src directory
if {[file exists $src_dir]} {
    set sv_files [glob -nocomplain [file join $src_dir "*.sv"]]
    set v_files [glob -nocomplain [file join $src_dir "*.v"]]
    
    foreach sv_file $sv_files {
        add_files -norecurse $sv_file
        puts "  Added SystemVerilog: [file tail $sv_file]"
    }
    
    foreach v_file $v_files {
        add_files -norecurse $v_file
        puts "  Added Verilog: [file tail $v_file]"
    }
}


# Configure PCIe IP Core based on FPGA family
puts "Configuring PCIe IP Core for pcie_7x..."


# TEMPLATE FILE: /src/templates/tcl/pcileech_generate_project.j2
# 7-Series PCIe IP (default)
create_ip -name pcie_7x -vendor xilinx.com -library ip -module_name pcie_7x_bridge
set_property -dict [list \
    CONFIG.Link_Speed {2.5_GT/s} \
    CONFIG.Maximum_Link_Width X1 \
    CONFIG.Device_ID 8125 \
    CONFIG.Vendor_ID 10ec \
    CONFIG.Revision_ID 04 \
    CONFIG.Class_Code_Base {02} \
    CONFIG.Class_Code_Interface {00} \
    CONFIG.Class_Code_Sub {00} \
    CONFIG.Subsystem_ID 8125 \
    CONFIG.Subsystem_Vendor_ID 10EC \
    CONFIG.Bar0_Enabled {true} \
    CONFIG.Bar0_Type {Memory} \
    CONFIG.Bar0_64bit {true} \
    CONFIG.Bar0_Size {1} \
    CONFIG.MSI_Enabled {true} \
    CONFIG.MSIx_Enabled {true} \
] [get_ips pcie_7x_bridge]


# Add IP files to project


# Add coefficient files if present


# Add constraint files
puts "Adding constraint files..."

# Add all XDC files from current directory
set xdc_files [glob -nocomplain "*.xdc"]
foreach xdc_file $xdc_files {
    add_files -fileset constrs_1 -norecurse $xdc_file
    puts "  Added constraint: [file tail $xdc_file]"
}


# Set top-level module

# Top module will be auto-detected by Vivado
set top_module ""


# Set source management mode to manual before setting top
set_property source_mgmt_mode None [current_project]
if {$top_module != ""} {
    set_property top $top_module [current_fileset]
    puts "Set top module: $top_module"
} else {
    puts "Top module will be auto-detected by Vivado"
}

# Update compile order
update_compile_order -fileset sources_1

# Generate IP cores
puts "Generating IP cores..."
generate_target all [get_files *.xci]
catch {config_ip_cache -export [get_ips -all]}

# Skip validation (validate_design is not available in all Vivado versions)
puts "Skipping design validation..."
# validate_design -quiet

puts "PCILeech project generation completed successfully!"
puts "Project: $project_name"
puts "Location: $project_dir"
puts "FPGA Part: $fpga_part"
puts "PCIe IP Type: pcie_7x"
puts "Max Lanes: 8"

puts "MSI Support: Enabled"


puts "MSI-X Support: Enabled"


# Save project
save_project_as $project_name $project_dir -force

puts "Project saved. Ready for build phase."
